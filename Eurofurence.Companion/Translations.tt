<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ output extension=".cs" #>
<#
    var reswPath = @"Translations.resw";

    var provider = new CSharpCodeProvider();
    var className = provider.CreateEscapedIdentifier(
        Path.GetFileNameWithoutExtension(Host.TemplateFile));

    Directory.SetCurrentDirectory(Host.ResolvePath(""));
    if (File.Exists(reswPath))
    { 
#>

using Windows.ApplicationModel.Resources; 

namespace <#= GetNamespace() #> 
{
    public static class <#= className #> 
    {
        private static readonly ResourceLoader _resourceLoader; 

        static <#= className #>() 
        {
            _resourceLoader = ResourceLoader.GetForViewIndependentUse("Translations");
        }

		public static string GetString(string index) => _resourceLoader.GetString(index).Replace("\\n", "\n");

<#
        foreach (string name in GetResourceKeys(reswPath).Where(n => !n.Contains(".")))
        {
#>

        public static string <#= provider.CreateEscapedIdentifier(name) #> 
			=> GetString("<#= name #>"); 
<#
        }
#>
    }
}
<#
    }
    else
        throw new FileNotFoundException(); 
#>
<#+
    private string GetNamespace()
    {
        return Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
    }

    private static IEnumerable<string> GetResourceKeys(string filePath)
    {
        var doc = XDocument.Load(filePath);
        return doc.Root.Elements("data").Select(e => e.Attribute("name").Value);
    }
#>